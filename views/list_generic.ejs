	<% var title = 'Experience'; var current = 'result' %>
<% include partials/header.ejs %>
	<div id="main-container">
		<div class="text-center mb-3">
		<a href="/list/experience" class="btn btn-secondary"> Switch to simple search </a>
		</div>
		<div id="Request" class="row">
			<fieldset class="col-md-4, form-group" >
			<legend>Selected columns</legend>
				<select class="selectpicker dropup" required data-live-search="true" id="cols-select" multiple data-actions-box="true" autocomplete="off" data-dropup-auto="false">
	<% for(var i = 0; i < cols.length; i++) {
		if(cols[i].slice(-2) == 'id' || cols[i].slice(-3) == "rid" || cols[i] == "id_"+table) { continue; }
	%>

					<option value="<%=cols[i] %>" <%= (defaultCols.includes(cols[i]) ? 'selected' : '') %> ><%= cols[i] %></option>
	<% } %>
				</select>
			</fieldset>
			<fieldset class="col-md-4, form-group">
			<legend>Conditions</legend>
				<select class="selectpicker dropup" required data-live-search="true" id="conds-select" multiple data-actions-box="true" autocomplete="off" data-dropup-auto="false">
	<% for(var i = 0; i < cols.length; i++) {
		if(cols[i].slice(-2) == 'id' || cols[i].slice(-3) == "rid" || cols[i] == "id_"+table) { continue; }
	%>

					<option value="<%=cols[i] %>" <%= (i==0) ? 'selected' : '' %> ><%= cols[i] %></option>
	<% } %>
				</select>
			</fieldset>
			<fieldset class="col-md-4, form-group">
			<legend>Group by</legend>
				<select class="selectpicker dropup" required data-live-search="true" id="cols-groupby" autocomplete="off" data-dropup-auto="false">
					<option value="none" >None</option>
	<% for(var i = 0; i < cols.length; i++) {
		if(cols[i].slice(-2) == 'id' || cols[i].slice(-3) == "rid" || cols[i] == "id_"+table) { continue; }
	%>

					<option value="<%=cols[i] %>" ><%= cols[i] %></option>
	<% } %>
				</select>
			</fieldset>
			<fieldset class="col-md-4, form-group">
				<legend style="opacity: 0;"> dummy  </legend>
				<button id="apply" class="btn btn-primary">
					Search
				</button>
			</fieldset>
			<fieldset class="col-md-12" id="addSpecialColumnButtonFieldset">
				<button class="btn btn-secondary" id="addSpecialColumnButton" >Add a special column</button>
			</fieldset>
			<fieldset class="col-md-12" style="display: none" id="addGroupedAttribute-fieldset">
				<legend>Add a special column</legend>
			<table>
				<tr>
					<select id="addGroupedAttribute-function" class="selectpicker dropup" data-dropup-auto="false">
						<option value="" disabled selected>Select the function</option>
						<option value="AVG" >Average</option>
						<option value="MAX" >Maximum</option>
						<option value="MIN" >Minimum</option>
						<option value="COUNT" >Count</option>
						<option value="GROUP_CONCAT" >Concatenate</option>
						<option value="STDDEV" >Standard deviation</option>
					</select>
					<select class="selectpicker dropup" required data-live-search="true" autocomplete="off" data-dropup-auto="false" id="addGroupedAttribute-attribute">
						<option value="" disabled selected>Select the variable</option>
						<% for(var i = 0; i < cols.length; i++) {
							if(cols[i].slice(-2) == 'id' || cols[i].slice(-3) == "rid" || cols[i] == "id_"+table) { continue; }
						%>
										<option value="<%=cols[i] %>" ><%= cols[i] %></option>
						<% } %>
					</select>
					<button id="addGroupedAttribute-button" class="btn" >Add</button>
				<tr/>
			</table>
			</fieldset>
		</div>
			<fieldset style="display: none" id="conditions-fieldset">
				<legend>Conditions</legend>
			<table id="conditions-list">
			</table>
			</fieldset>
		<div class="alert alert-danger" role="alert" style="display: none;" id="error-display">
			<strong>Error</strong> There is an error in your request to the database
	 	</div>
			<fieldset class="col-md-12" id="drawChartButtonFieldset">
				<button class="btn btn-secondary" id="drawChartButton" >Draw a chart</button>
			</fieldset>
			<fieldset class="col-md-12" style="display: none" id="drawChartFieldset">
				<legend>Draw a chart</legend>
			<table>
				<tr>
					<select id="drawChartFieldset-charttype" class="selectpicker dropup" data-dropup-auto="false">
						<option value="" disabled selected>Select a type of chart</option>
						<option value="bar" >Bar</option>
						<option value="line" >Line</option>
						<option value="pie" >Pie</option>
						<option value="radar" >Radar</option>
					</select>
					<select class="selectpicker dropup" required data-live-search="true" autocomplete="off" data-dropup-auto="false" id="drawChartFieldset-label">
						<option value="" disabled selected>Select label column</option>
						<% for(var i = 0; i < defaultCols.length; i++) {
							if(defaultCols[i].slice(-2) == 'id' || defaultCols[i].slice(-3) == "rid" || defaultCols[i] == "id_"+table) { continue; }
						%>
										<option value="<%=defaultCols[i] %>" ><%= defaultCols[i] %></option>
						<% } %>
					</select>
					<select class="selectpicker dropup" required data-live-search="true" autocomplete="off" data-dropup-auto="false" id="drawChartFieldset-data">
						<option value="" disabled selected>Select data column</option>
						<% for(var i = 0; i < defaultCols.length; i++) {
							if(defaultCols[i].slice(-2) == 'id' || defaultCols[i].slice(-3) == "rid" || defaultCols[i] == "id_"+table) { continue; }
						%>
										<option value="<%=defaultCols[i] %>" ><%= defaultCols[i] %></option>
						<% } %>
					</select>
					<button id="drawChartFieldset-button" class="btn" >Add</button>
					<canvas id="drawChartFieldset-canvas" width="0" height="0"></canvas>
				<tr/>
			</table>
			</fieldset>
		<br>
		<div class="table-responsive">
			<div id="pages">
			</div>
			<table class="table table-hover table-sm" >
				<thead id="table-header">
				</thead>
				<tbody class="container" id="table-body" >
				</tbody>
			</table>
		</div>
	</div>
<% include partials/socket.io.ejs %>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
<script>
	var errorMessage = null;
$( function() {
	var tableheader = document.getElementById('table-header');
	var tablebody = document.getElementById('table-body');
	var colsSelect = document.getElementById('cols-select');
	var colsGroupBy = document.getElementById('cols-groupby');
	var colsSort = document.getElementById('cols-sort');

	var applyButton = document.getElementById('apply');
	var pages = document.getElementById('pages');
	var dataRequest = {
		table: '<%= table %>',
		cols: [
		<% for(var i=0 ; i < defaultCols.length; i++) { if(i) { %>,
		<% } %>	"<%= defaultCols[i] %>"<% } %>
		],
		groupby: null,
		sorted: null,
		conditions: [],
		limit: {
			size: 50,
			offset: 0
		}
	};
	var newDataRequest = {
		table: '<%= table %>',
		cols: [
		<% for(var i=0 ; i < defaultCols.length; i++) { if(i) { %>,
		<% } %>	"<%= defaultCols[i] %>"<% } %>
		],
		groupby: null,
		sorted: null,
		conditions: [],
		limit: {
			size: 50,
			offset: 0
		}
	};

	var bringSelectedOptionsToTop = function(select) {
		var onlySelectedUntilNow = true;
		var lastSelectedChild = null;

		if(select.options[0].value == "none") {
			lastSelectedChild = select.options.item(0);
		}
		for(var i = 0 ; i < select.options.length ; i++) {
			if(select.options[i].selected) {
				var option = select.options.item(i);
				if(!onlySelectedUntilNow) {
					if(lastSelectedChild) {
						lastSelectedChild.insertAdjacentElement('afterend', option);
					} else {
						select.insertAdjacentElement('afterbegin', option);
					}
				}
				lastSelectedChild = option;
			} else {
				onlySelectedUntilNow = false;
			}
		}
		$('#'+select.id).selectpicker('refresh');
	}
	var insertRow = function(row) {
		var line = document.createElement("tr");
		for (var key in row) {
			if(key.slice(-2) == 'id') continue;
			var cell = document.createElement("td");
			var text = document.createTextNode(row[key]);


			if(Object.keys(row).includes(key+' id')) {
				var link = document.createElement("a");
				link.href = '/show/'+key+'/'+row[key+' id'];
				link.appendChild(text);
				cell.appendChild(link)
			} else {
				cell.appendChild(text);
			}
			line.appendChild(cell);
		}

		if(dataRequest.groupby == null) {
			var moreDetailsCell = document.createElement("td");
			var moreDetailsLink = document.createElement("a");
			moreDetailsLink.href = "/show/"+dataRequest.table+"/"+row.id;
			moreDetailsLink.className = "btn btn-primary";
			var moreDetailsText = document.createTextNode("More details");
			moreDetailsLink.appendChild(moreDetailsText);
			moreDetailsCell.appendChild(moreDetailsLink);
			line.appendChild(moreDetailsCell);
		}
		tablebody.appendChild(line);
	};

	var removeChildren = function(element) {
		while(element.firstChild) {
			element.removeChild(element.firstChild);
		}

	};
	var getHeaderLinkListener = function(col) {
		return function() {
			dataRequest.sorted = col;
			dataRequest.limit.offset = 0;
			socket.emit('getTableData', dataRequest);
		}
	};
	var insertHeaderRow = function(attributes) {
		tableheader.removeChild(tableheader.firstChild);
		var headerLine = document.createElement("tr");
		for(var i = 0 ; i < attributes.length; i++) {
			if(attributes[i].slice(-2) == 'id') continue;
			var cell = document.createElement("th");
			var link = document.createElement("a");
			var text = document.createTextNode(attributes[i]);
			link.href='javascript:void(0)';
			link.addEventListener('click', getHeaderLinkListener(attributes[i]));
			link.appendChild(text);
			cell.appendChild(link);
			headerLine.appendChild(cell);
		}
		tableheader.appendChild(headerLine);
	};

	var getPageLinkListener = function(size, offset) {
		return function() {
			dataRequest.limit.size = size;
			dataRequest.limit.offset = offset;
			socket.emit('getTableData', dataRequest);
		};
	};

	var updatePages = function(total, limit) {
		removeChildren(pages);
		var nbPages = Math.ceil(total / limit.size);
		if(nbPages < 2)
			return;
		var pageTable = document.createElement("table");
		pageTable.style = "margin: 0px auto;";
		var pageRow = document.createElement("tr")

		var sep = document.createTextNode(" ");

		var prevCell = document.createElement("td")
		var prevLink = document.createElement("a");
		var prevText = document.createTextNode("Previous");
		if(limit.offset != 0) {
			prevLink.href='javascript:void(0)';
			prevLink.addEventListener('click', getPageLinkListener(limit.size, (limit.offset>limit.size) ? (limit.offset-limit.size) : 0));
		}
		prevLink.style='margin-right: 2em';
		prevLink.appendChild(prevText);
		prevCell.appendChild(prevLink);
		pageRow.appendChild(prevCell);


		for (var i = 0 ; i < nbPages; i++ ) {
			var cell = document.createElement("td")
			var txt = document.createTextNode(i+1);
			var link = document.createElement("a");

			link.appendChild(txt);
			if(i*limit.size != limit.offset) {
				link.addEventListener('click', getPageLinkListener(limit.size, i*limit.size));
				link.href='javascript:void(0)';
			}
			link.style='margin: 0.5em;'
			cell.appendChild(link);
			pageRow.appendChild(cell);
		}

		var nextCell = document.createElement("td")
		var nextLink = document.createElement("a");
		var nextText = document.createTextNode("Next");
		if(limit.offset + limit.size < total) {
			nextLink.href='javascript:void(0)';
			nextLink.addEventListener('click', getPageLinkListener(limit.size, limit.offset+limit.size));
		}
		nextLink.style = 'margin-left: 2em;';
		nextLink.appendChild(nextText);
		nextCell.appendChild(nextLink)
		pageRow.appendChild(nextLink);
		pageTable.appendChild(pageRow);
		pages.appendChild(pageTable);
	};

	socket.on('error', function(message) {
		document.getElementById('error-display').style.display = "block";
		errorMessage = error;
	});
	socket.on('receiveTableData', function(data) {
		if(data.id == "chart") {
			drawChart(data.table);
			return;
		}
		insertHeaderRow(data.attributes);
		removeChildren(tablebody);
		for(var i = 0 ; i < data.table.length; i++) {
			insertRow(data.table[i]);
		}
		updatePages(data.nbRow, dataRequest.limit);
		$('#main-container').selectpicker();
		document.getElementById('error-display').style.display = "none";
	});
	applyButton.addEventListener('click', function(evt) {
		dataRequest.cols = newDataRequest.cols.slice(0);
		dataRequest.groupby = newDataRequest.groupby;
		dataRequest.conditions = newDataRequest.conditions;//TODO
		dataRequest.limit.offset = 0;
		if(!dataRequest.cols.includes(dataRequest.sorted)) {
			dataRequest.sorted = null;
		}
		removeChart();
		socket.emit('getTableData', dataRequest);
	});

	colsSelect.addEventListener('change', function(e) {
		newDataRequest.cols = [];
		var drawChartLabelSelect = document.getElementById('drawChartFieldset-label');
		var drawChartDataSelect = document.getElementById('drawChartFieldset-data');
		removeChildren(drawChartLabelSelect);
		removeChildren(drawChartDataSelect);
		addOption(drawChartLabelSelect, "", "Select label column", 'end', false, true);
		addOption(drawChartDataSelect, "", "Select data column", 'end', false, true);

		$.each($("#cols-select option:selected"), function(){
			newDataRequest.cols.push($(this).val());
			addOption(drawChartLabelSelect, $(this).val(), $(this).val(), 'end');
			addOption(drawChartDataSelect, $(this).val(), $(this).val(), 'end');
		});
		$('#drawChartFieldset-label').selectpicker('refresh');
		$('#drawChartFieldset-data').selectpicker('refresh');
	});
	$('#cols-select').on('hidden.bs.select', function() {
		bringSelectedOptionsToTop(colsSelect);
	});


	//part conditions
	var conditionList = document.getElementById('conditions-list');
	var conditionSelect = document.getElementById('conds-select');
	var removeCondition = function(column) {
		var index = -1;
		delete newDataRequest.conditions[column];

		console.log(column);
		$('#conds-select').selectpicker('val', Object.keys(newDataRequest.conditions));
		var child = document.getElementById('condition-'+column);
		console.log(child);
		console.log(child.parentNode)
		conditionList.removeChild(child);
	};
	var getRemoveConditionListener = function(column) {
		return function() {
			removeCondition(column);
		};
	};
	var addCondition = function(column, condition) {
		if(column.slice(-2) == 'id' || column.slice(-3) == "rid" || column == "id_<%= table %>")
			return;
		var tr = document.createElement("tr");
		tr.id = 'condition-'+column
		var tdColName = document.createElement("td");
		var txtColName = document.createTextNode(column);
		tdColName.appendChild(txtColName);
		tr.appendChild(tdColName);

		//tdselect
		var operators = ['=', '>', '<', '<=', '>=', '!=', 'contains', 'in', 'contains words', 'between', 'match regexp', 'is not null'];
		var tdoperator = document.createElement('td');
		var selectoperator = document.createElement('select');
		selectoperator.id = 'condition-operator-'+column;
		selectoperator.addEventListener('change', getConditionOperatorInputListener(column));
		selectoperator.className = "form-control";
		for (var i = 0; i < operators.length ; i++) {
			var option = document.createElement("option");
			option.value = operators[i];
			option.text = operators[i]
			if(condition.operator == operators[i]) {
				option.selected = true;
			}
			selectoperator.appendChild(option);
		}
		tdoperator.appendChild(selectoperator);
		tr.appendChild(tdoperator);

		//tdinput
		var tdvalue = document.createElement("td");
		var inputvalue = document.createElement("input");
		inputvalue.type = "text";
		inputvalue.name = column;
		inputvalue.value = condition.value;
		inputvalue.id = 'condition-value-'+column;
		inputvalue.className = "form-control";
		inputvalue.addEventListener('change', getConditionValueInputListener(column));
		tdvalue.appendChild(inputvalue);
		tr.appendChild(tdvalue);

		var tdLink = document.createElement("td");
		var aLink = document.createElement("a");
		aLink.href = 'javascript:void(0)';
		aLink.addEventListener("click", getRemoveConditionListener(column));
		var iLink = document.createElement("i");
		iLink.className = "fa fa-times";
		aLink.appendChild(iLink);
		tdLink.appendChild(aLink);
		tr.appendChild(tdLink);
		conditionList.append(tr);

		document.getElementById('conditions-fieldset').style.display = "block";
	}
	conditionSelect.addEventListener('change', function(e) {
		removeChildren(conditionList);
		var prevConditions = newDataRequest.conditions;
		newDataRequest.conditions = {};
		$.each($("#conds-select option:selected"), function(){
			addCondition($(this).val(), (typeof(prevConditions[$(this).val()]) != 'undefined') ?  prevConditions[$(this).val()] : {operator: '=', value: ''});
			newDataRequest.conditions[$(this).val()] = prevConditions[$(this).val()] || {operator: '=', value: ''};
		});
	});
	$('#conds-select').on('hidden.bs.select', function() {
		bringSelectedOptionsToTop(conditionSelect);
	});

	var getConditionValueInputListener = function(column) {
		return function() {
			newDataRequest.conditions[column].value = document.getElementById('condition-value-'+column).value;
		};
	};

	var getConditionOperatorInputListener = function(column) {
		return function() {
				newDataRequest.conditions[column].operator = document.getElementById('condition-operator-'+column).value;
		}
	};

	colsGroupBy.addEventListener('change', function(e){
		newDataRequest.groupby = $("#cols-groupby option:selected")[0].value
		if(newDataRequest.groupby == "none")
			newDataRequest.groupby = null;
	});

	var addGroupedAttribute = function() {
		var selectOperator = document.getElementById('addGroupedAttribute-function');
		if(selectOperator.selectedIndex == 0 || document.getElementById('addGroupedAttribute-attribute').selectedIndex == 0) {
			document.getElementById('addSpecialColumnButtonFieldset').style.display = "block";
			document.getElementById('addGroupedAttribute-fieldset').style.display = "none";
			return;
		}
		// retrieving necessary values
		var operatorValue = selectOperator.value;
		var operatorName = selectOperator.options[selectOperator.selectedIndex].text;
		var attribute = document.getElementById('addGroupedAttribute-attribute').value;


		var newOptionValue = operatorValue +'('+attribute+')';
		var newOptionName = operatorName + ' of: ' + attribute

		for (var i = 0 ; i < colsSelect.options.length ; i++) {
			if(colsSelect.options[i].value == newOptionValue) {
				if(!colsSelect.options[i].selected) {
					colsSelect.options[i].selected = true;
					$('#'+colsSelect.id).selectpicker('refresh');
				}
				return;
			}
		}

		//creating new option for column selecter
		addOption(colsSelect, newOptionValue, newOptionName, 'begin', true)

		//creating new option for conditions selecter
		addOption(conditionSelect, newOptionValue, newOptionName, 'end')

		//create new options for chart drawing
		var drawChartLabelSelect = document.getElementById('drawChartFieldset-label');
		var drawChartDataSelect = document.getElementById('drawChartFieldset-data');
		addOption(drawChartLabelSelect, newOptionValue, newOptionName, 'end');
		addOption(drawChartDataSelect, newOptionValue, newOptionName, 'end');

		$('#'+colsSelect.id).selectpicker('refresh');
		$('#'+conditionSelect.id).selectpicker('refresh');
		newDataRequest.cols.push(newOptionValue);
		document.getElementById('addSpecialColumnButtonFieldset').style.display = "block";
		document.getElementById('addGroupedAttribute-fieldset').style.display = "none";

	}

	var addOption = function(select, value, text, position, selected, disabled) {
		var newOption = document.createElement('option');
		newOption.value = value
		if(selected)
			newOption.selected = true;
		if(disabled)
			newOption.disabled = true;
		var newOptiontext = document.createTextNode(text);
		newOption.appendChild(newOptiontext);
		if(position != 'begin')
			select.appendChild(newOption);
		else
			select.options.item(0).insertAdjacentElement('beforebegin', newOption);
	}

	document.getElementById('addSpecialColumnButton').addEventListener('click', function() {
		document.getElementById('addSpecialColumnButtonFieldset').style.display = "none";
		document.getElementById('addGroupedAttribute-fieldset').style.display = "block";
		document.getElementById('addGroupedAttribute-function').selectedIndex = 0;
		document.getElementById('addGroupedAttribute-attribute').selectedIndex = 0;
		$('#addGroupedAttribute-function').selectpicker('refresh');
		$('#addGroupedAttribute-attribute').selectpicker('refresh');
	});

	var chartEnabled = false;
	var removeChart = function() {
		document.getElementById('drawChartButton').innerHTML = "Draw a chart";
		document.getElementById('drawChartFieldset').style.display = "none";
		if(chart) {
			chart.destroy();
		}
		var ctx = document.getElementById('drawChartFieldset-canvas');
		ctx.width = "0";
		ctx.height= "0";
		chartEnabled = false;
	};
	document.getElementById('drawChartButton').addEventListener('click', function(){
		if(chartEnabled) {
			removeChart();
		} else {
			document.getElementById('drawChartButton').innerHTML = "Remove the chart";
			document.getElementById('drawChartFieldset').style.display = "block";
			document.getElementById('drawChartFieldset-charttype').selectedIndex = 0;
			document.getElementById('drawChartFieldset-label').selectedIndex = 0;
			document.getElementById('drawChartFieldset-data').selectedIndex = 0;
			$('#drawChartFieldset-charttype').selectpicker('refresh');
			$('#drawChartFieldset-label').selectpicker('refresh');
			$('#drawChartFieldset-data').selectpicker('refresh');
			chartEnabled = true;
		}
	});

	function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
	}

	var chart = null;
	document.getElementById('drawChartFieldset-button').addEventListener('click', function() {
		var labelColumn = document.getElementById('drawChartFieldset-label').value;
		var dataColumn = document.getElementById('drawChartFieldset-data').value;
		var chartdataRequest = JSON.parse(JSON.stringify(dataRequest));
		chartdataRequest.limit = null;
		chartdataRequest.cols = [labelColumn, dataColumn];
		chartdataRequest.id = "chart";
		socket.emit('getTableData', chartdataRequest);
	});

	var drawChart = function(tableData) {
		var ctx = document.getElementById('drawChartFieldset-canvas');
		ctx.width = "400";
		ctx.height= "250";

		var chartType = document.getElementById('drawChartFieldset-charttype').value;
		var labelColumn = document.getElementById('drawChartFieldset-label').value;
		var dataColumn = document.getElementById('drawChartFieldset-data').value;
		if(dataColumn.includes('(')) {
			dataColumn = dataColumn.split('(')[0] + '(`' + dataColumn.split('(')[1].split(')')[0] + '`)';
		}
		var data = tableData.map(r => r[dataColumn]);
		var labels = tableData.map(r => r[labelColumn]);
		if(chart) {
			chart.destroy();
		}

		chart = new Chart(ctx, {
			type: chartType,
			data: {
				labels: labels,
				datasets: [{
					label: dataColumn,
					data: data,
					backgroundColor: labels.map(l => getRandomColor())
				}]
			},
			options: {
				legend: {
            display: (labels.length < 10)
         }
			}
		});
	};


	document.getElementById('addGroupedAttribute-button').addEventListener('click', addGroupedAttribute);
	$('#cols-groupby').on('hidden.bs.select', function() {
		bringSelectedOptionsToTop(colsGroupBy);
	});

	bringSelectedOptionsToTop(colsSelect);
	socket.emit('getTableData', dataRequest);

  } );
</script>

<% include partials/footer.ejs %>
